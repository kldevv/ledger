{
  "root": true,
  "env": {
    "node": true,
    "browser": true,
    "es2021": true
  },
  "extends": [
    // ESLint
    "eslint:recommended",

    // TypeScript
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-type-checked",

    // Import
    "plugin:import/recommended",
    "plugin:import/typescript",

    // React
    "plugin:react/recommended",

    // Storybook
    "plugin:storybook/recommended",

    // Nextjs
    "next/core-web-vitals",

    // Prettier
    "prettier",
    "plugin:prettier/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    // to always use `tsconfig.jsons` nearest to source files
    "project": "../tsconfig.json"
    // "tsconfigRootDir": "./tsconfig.json"
  },
  "plugins": [
    // TypeScript
    "@typescript-eslint",

    // React
    "react-hooks",
    "react"
  ],
  "rules": {
    // Enforce consistent usage of type imports
    // https://typescript-eslint.io/rules/consistent-type-imports/
    "@typescript-eslint/consistent-type-imports": "error",

    // Disallow certain types in boolean expressions
    // https://typescript-eslint.io/rules/strict-boolean-expressions/
    "@typescript-eslint/strict-boolean-expressions": "error",

    // Enforce naming conventions for everything across a codebase
    // https://typescript-eslint.io/rules/naming-convention/
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "variableLike",
        "format": ["camelCase", "PascalCase"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "forbid"
      }
    ],

    // Turns off all rules that are unnecessary or might conflict with Prettier
    "prettier/prettier": [
      "error",
      {
        // Print trailing commas wherever possible in multi-line comma-separated syntactic structures
        // https://prettier.io/docs/en/options.html#trailing-commas
        "trailingComma": "all",

        // Print semicolons at the ends of statements
        // https://prettier.io/docs/en/options.html#trailing-commas
        "semi": false,

        // Include parentheses around a sole arrow function parameter
        // https://prettier.io/docs/en/options.html#trailing-commas
        "arrowParens": "always",

        // Use single quotes instead of double quotes
        // https://prettier.io/docs/en/options.html#quotes
        "singleQuote": true,

        // If you want Prettier to force all prose blocks to be on a single line and rely on editor/viewer soft wrapping instead, you can use "never"
        // https://prettier.io/docs/en/options.html#prose-wrap
        "proseWrap": "never"
      }
    ],

    // React hooks
    // https://www.npmjs.com/package/eslint-plugin-react-hooks
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "error",

    // Require the use of === and !==
    // https://eslint.org/docs/latest/rules/eqeqeq
    "eqeqeq": ["error", "always", { "null": "ignore" }],

    // Enforce a convention in the order of require() / import statements
    // https://github.com/import-js/eslint-plugin-import/blob/HEAD/docs/rules/order.md
    "import/order": [
      "error",
      {
        // How groups are defined, and the order to respect
        // https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/order.md#groups-array
        "groups": [
          "builtin",
          "external",
          "internal",
          "unknown",
          "parent",
          "sibling",
          "index",
          "object",
          "type"
        ],

        // To be able to group by paths mostly needed with aliases pathGroups can be defined
        // https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/order.md#pathgroups-array-of-objects
        "pathGroups": [
          {
            "pattern": "react*",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "*.[p]css",
            "patternOptions": {
              "matchBase": true
            },
            "group": "type",
            "position": "after"
          }
        ],

        // Enforces or forbids new lines between import groups
        // https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/order.md#newlines-between-ignorealwaysalways-and-inside-groupsnever
        "newlines-between": "always",

        // Sort the order within each group in alphabetical manner based on import path
        // https://github.com/import-js/eslint-plugin-import/blob/HEAD/docs/rules/order.md#alphabetize-order-ascdescignore-orderimportkind-ascdescignore-caseinsensitive-truefalse
        "alphabetize": {
          "order": "asc"
        },

        // Warns when unassigned imports are out of order
        // https://github.com/import-js/eslint-plugin-import/blob/HEAD/docs/rules/order.md#warnonunassignedimports-truefalse
        "warnOnUnassignedImports": true
      }
    ],

    // Ensure consistent use of file extension within the import path
    // https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/extensions.md
    "import/extensions": "error",

    // Reports if a resolved path is imported more than once
    // https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-duplicates.md
    "import/no-duplicates": ["error", { "considerQueryString": true }],

    // Forbid the use of extraneous packages
    // https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-extraneous-dependencies.md
    "import/no-extraneous-dependencies": [
      "error",
      // If set to false, then the rule will show an error when devDependencies are imported. Defaults to true. Type imports are ignored by default.
      // When using an array of globs, the setting will be set to true (no errors reported) if the name of the file being linted (i.e. not the imported file/module) matches a single glob in the array, and false otherwise
      { "devDependencies": ["**/*.test.{tsx,ts,js,jsx}"] }
    ]
  },
  "ignorePatterns": [
    "src/**/*.test.ts",
    "src/**/__generated__/*",
    // TODO: Remove stories folder once we set up the stories pattern
    "src/stories/*"
  ],
  "overrides": [
    // Disable type-aware linting for JavaScript files
    {
      "files": ["*.js"],
      "extends": ["plugin:@typescript-eslint/disable-type-checked"]
    }
  ]
}
