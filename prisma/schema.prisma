generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_POSTGRES_DB_URL")
}

model Category {
  id          String       @id @default(uuid())
  type        CategoryType
  name        String
  accounts    Account[]
  wallet      Wallet       @relation(fields: [walletId], references: [id])
  walletId    String
  createdDate DateTime     @default(now())
  updatedDate DateTime     @updatedAt

  @@unique([walletId, name])
}

model Account {
  id          String   @id @default(uuid())
  name        String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  entries     Entry[]
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt

  @@unique([categoryId, name])
}

model Transaction {
  id          String   @id @default(uuid())
  accrualDate DateTime
  subject     String
  description String?
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  walletId    String
  entries     Entry[]
  tags        Tag[]
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
}

model Entry {
  id              String      @id @default(uuid())
  transactionDate DateTime
  account         Account     @relation(fields: [accountId], references: [id])
  accountId       String
  credit          Float
  debit           Float
  memo            String?
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId   String
  status          EntryStatus @default(PENDING)
  createdDate     DateTime    @default(now())
  updatedDate     DateTime    @updatedAt
}

model Tag {
  id           String        @id @default(uuid())
  name         String
  transactions Transaction[]
  wallet       Wallet        @relation(fields: [walletId], references: [id])
  walletId     String
  createdDate  DateTime      @default(now())
  updatedDate  DateTime      @updatedAt

  @@unique([walletId, name])
}

model Wallet {
  id           String        @id @default(uuid())
  name         String
  currency     Currency
  profile      Profile       @relation(fields: [ownerId], references: [id])
  ownerId      String
  categories   Category[]
  transactions Transaction[]
  tags         Tag[]
  createdDate  DateTime      @default(now())
  updatedDate  DateTime      @updatedAt

  @@unique([ownerId, name])
}

model Profile {
  id          String   @id @default(uuid())
  name        String
  wallets     Wallet[]
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
}

enum EntryStatus {
  PENDING
  COMPLETED
}

enum CategoryType {
  ASSET
  LIABILITIES
  EQUITY
}

enum Currency {
  USD
  NTD
  EUR
}
