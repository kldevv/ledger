generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_POSTGRES_DB_URL")
}

model AccountGroup {
  id        String         @id @default(uuid())
  type      AccountingType
  name      String
  accounts  Account[]
  branch    Branch         @relation(fields: [branchId], references: [id])
  branchId  String         @map("branch_id")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  deletedAt DateTime?      @map("deleted_at")

  @@unique([branchId, name])
  @@map("account_groups")
}

model Account {
  id             String       @id @default(uuid())
  name           String
  accountGroup   AccountGroup @relation(fields: [accountGroupId], references: [id])
  accountGroupId String       @map("account_group_id")
  branch         Branch       @relation(fields: [branchId], references: [id])
  branchId       String       @map("branch_id")
  entries        Entry[]
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")

  @@unique([accountGroupId, name])
  @@map("accounts")
}

model Journal {
  id          String    @id @default(uuid())
  accrualDate DateTime  @map("accrual_date")
  note        String
  branch      Branch    @relation(fields: [branchId], references: [id])
  branchId    String    @map("branch_id")
  entries     Entry[]
  tags        Tag[]
  links       Link[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("journals")
}

model Entry {
  id              String      @id @default(uuid())
  transactionDate DateTime    @map("transaction_date")
  account         Account     @relation(fields: [accountId], references: [id])
  accountId       String      @map("account_id")
  branch          Branch      @relation(fields: [branchId], references: [id])
  branchId        String      @map("branch_id")
  amount          Float
  memo            String
  journal         Journal     @relation(fields: [journalId], references: [id], onDelete: Cascade)
  journalId       String      @map("journal_id")
  status          EntryStatus @default(PENDING)
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  deletedAt       DateTime?   @map("deleted_at")

  @@map("entries")
}

model Tag {
  id        String    @id @default(uuid())
  name      String
  journals  Journal[]
  branch    Branch    @relation(fields: [branchId], references: [id])
  branchId  String    @map("branch_id")
  type      TagType
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@unique([branchId, name])
  @@map("tags")
}

model Link {
  id        String    @id @default(uuid())
  name      String
  journals  Journal[]
  type      LinkType
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@unique([userId, name])
  @@map("links")
}

model Branch {
  id            String         @id @default(uuid())
  name          String
  currency      Currency
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @map("user_id")
  entries       Entry[]
  accountGroups AccountGroup[]
  accounts      Account[]
  journals      Journal[]
  tags          Tag[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")

  @@unique([userId, name])
  @@map("branches")
}

model User {
  id        String    @id @default(uuid())
  name      String
  branches  Branch[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("users")
}

enum EntryStatus {
  PENDING
  COMPLETED

  @@map("entry_status")
}

enum TagType {
  GENERAL
  PEOPLE
  PROPERTY
  TRAVEL
  ORGANIZATION

  @@map("tag_type")
}

enum LinkType {
  GENERAL
  FX

  @@map("link_type")
}

enum Currency {
  USD
  NTD
  EUR
  RMB

  @@map("currency")
}

enum AccountingType {
  ASSETS
  LIABILITIES
  EQUITY

  @@map("accounting_type")
}
