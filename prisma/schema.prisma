generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_POSTGRES_DB_URL")
}

model AccountGroup {
  id        String         @id @default(cuid())
  type      AccountingType
  name      String
  branchId  String         @map("branch_id")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  deletedAt DateTime?      @map("deleted_at")

  accounts Account[]

  branch Branch @relation(fields: [branchId], references: [id])

  @@unique([branchId, name])
  @@map("account_groups")
}

model Account {
  id             String    @id @default(cuid())
  name           String
  accountGroupId String    @map("account_group_id")
  branchId       String    @map("branch_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  entries Entry[]

  branch       Branch       @relation(fields: [branchId], references: [id])
  accountGroup AccountGroup @relation(fields: [accountGroupId], references: [id])

  @@unique([accountGroupId, name])
  @@map("accounts")
}

model Journal {
  id          String    @id @default(cuid())
  accrualDate DateTime  @map("accrual_date")
  note        String
  branchId    String    @map("branch_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  entries Entry[]
  tags    Tag[]
  links   Link[]

  branch Branch @relation(fields: [branchId], references: [id])

  @@map("journals")
}

model Entry {
  id              String      @id @default(cuid())
  transactionDate DateTime    @map("transaction_date")
  accountId       String      @map("account_id")
  branchId        String      @map("branch_id")
  amount          Float
  memo            String
  journalId       String      @map("journal_id")
  status          EntryStatus
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  deletedAt       DateTime?   @map("deleted_at")

  account Account @relation(fields: [accountId], references: [id])
  branch  Branch  @relation(fields: [branchId], references: [id])
  journal Journal @relation(fields: [journalId], references: [id], onDelete: Cascade)

  @@map("entries")
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  branchId  String    @map("branch_id")
  type      TagType
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  journals Journal[]

  branch Branch @relation(fields: [branchId], references: [id])

  @@unique([branchId, name])
  @@map("tags")
}

model Link {
  id        String    @id @default(cuid())
  name      String
  type      LinkType
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  journals Journal[]

  @@unique([userId, name])
  @@map("links")
}

model Branch {
  id        String    @id @default(cuid())
  name      String
  currency  Currency
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  entries       Entry[]
  accountGroups AccountGroup[]
  accounts      Account[]
  journals      Journal[]
  tags          Tag[]

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, name])
  @@map("branches")
}

model UserAccount {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("user_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts UserAccount[]
  sessions Session[]
  branches Branch[]

  @@map("users")
}

enum EntryStatus {
  PENDING
  COMPLETED

  @@map("entry_status")
}

enum TagType {
  GENERAL
  PEOPLE
  PROPERTY
  TRAVEL
  ORGANIZATION

  @@map("tag_type")
}

enum LinkType {
  GENERAL
  FX

  @@map("link_type")
}

enum Currency {
  USD
  NTD
  EUR
  RMB

  @@map("currency")
}

enum AccountingType {
  ASSETS
  LIABILITIES
  EQUITY

  @@map("accounting_type")
}
