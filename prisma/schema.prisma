generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_POSTGRES_DB_URL")
}

model Category {
  id             String       @id @default(uuid())
  type           CategoryType
  name           String
  accounts       Account[]
  treasuryBook   TreasuryBook @relation(fields: [treasuryBookId], references: [id])
  treasuryBookId String       @map("treasury_book")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")

  @@unique([treasuryBookId, name])
  @@map("categories")
}

model Account {
  id             String       @id @default(uuid())
  name           String
  category       Category     @relation(fields: [categoryId], references: [id])
  categoryId     String       @map("category_id")
  treasuryBook   TreasuryBook @relation(fields: [treasuryBookId], references: [id])
  treasuryBookId String       @map("treasury_book_id")
  entries        Entry[]
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")

  @@unique([categoryId, name])
  @@map("accounts")
}

model Transaction {
  id             String       @id @default(uuid())
  accrualDate    DateTime     @map("accrual_date")
  note           String
  treasuryBook   TreasuryBook @relation(fields: [treasuryBookId], references: [id])
  treasuryBookId String       @map("treasury_book_id")
  entries        Entry[]
  tags           Tag[]
  links          Link[]
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")

  @@map("transactions")
}

model Entry {
  id              String       @id @default(uuid())
  transactionDate DateTime     @map("transaction_date")
  account         Account      @relation(fields: [accountId], references: [id])
  accountId       String       @map("account_id")
  treasuryBook    TreasuryBook @relation(fields: [treasuryBookId], references: [id])
  treasuryBookId  String       @map("treasury_book_id")
  amount          Float
  memo            String
  transaction     Transaction  @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId   String       @map("transaction_id")
  status          EntryStatus  @default(PENDING)
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  deletedAt       DateTime?    @map("deleted_at")

  @@map("entries")
}

model Tag {
  id             String        @id @default(uuid())
  name           String
  transactions   Transaction[]
  treasuryBook   TreasuryBook  @relation(fields: [treasuryBookId], references: [id])
  treasuryBookId String        @map("treasury_book_id")
  type           TagType
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  deletedAt      DateTime?     @map("deleted_at")

  @@unique([treasuryBookId, name])
  @@map("tags")
}

model Link {
  id           String        @id @default(uuid())
  name         String
  transactions Transaction[]
  type         LinkType
  userId       String        @map("user_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  deletedAt    DateTime?     @map("deleted_at")

  @@map("links")
}

model TreasuryBook {
  id           String        @id @default(uuid())
  name         String
  currency     Currency
  profile      Profile       @relation(fields: [ownerId], references: [id])
  ownerId      String        @map("owner_id")
  entries      Entry[]
  categories   Category[]
  accounts     Account[]
  transactions Transaction[]
  tags         Tag[]
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  deletedAt    DateTime?     @map("deleted_at")

  @@unique([ownerId, name])
  @@map("treasury_book")
}

model Profile {
  id           String         @id @default(uuid())
  name         String
  treasuryBook TreasuryBook[]
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  deletedAt    DateTime?      @map("deleted_at")

  @@map("profiles")
}

enum EntryStatus {
  PENDING
  COMPLETED

  @@map("entry_status")
}

enum CategoryType {
  ASSETS
  LIABILITIES
  EQUITY

  @@map("category_type")
}

enum TagType {
  GENERAL
  PEOPLE
  PROPERTY
  TRAVEL
  ORGANIZATION

  @@map("tag_type")
}

enum LinkType {
  GENERAL
  FX

  @@map("link_type")
}

enum Currency {
  USD
  NTD
  EUR
  RMB

  @@map("currency")
}

enum AccountingType {
  ASSETS
  LIABILITIES
  EQUITY

  @@map("accounting_type")
}
